
import math
import copy

X = "X"
O = "O"
EMPTY = None


def initial_state():
    """
    Returns starting state of the board.
    """
    return [[EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY],
            [EMPTY, EMPTY, EMPTY]]


def player(board):
    """
    Returns player who has the next turn on a board.
    """
    
    countX = 0
    countO = 0
    
    for row in range(len(board)):
        for col in range(len(board[row])):
            if board[row][col] == X:
                countX += 1
            if board[row][col] == O:
                countO += 1
                
    if countX > countO:
        return O
    else: 
        return X
        


def actions(board):
    """
    Returns set of all possible actions (i, j) available on the board.
    """
    actofmaze = set()
    
    for row in range(len(board)):
        for col in range(len(board[0])):
            if board[row][col] == EMPTY:
                actofmaze.add((row,col))
                
    return actofmaze


def result(board, action):
    """
    Returns the board that results from making move (i, j) on the board.
    """
    if action not in actions(board):
        raise Exception("Not a valid move!")

    row,col = action
    board_copy = copy.deepcopy(board)
    board_copy[row][col] = player(board) 
    
    return board_copy
    
def rowcheck(board,player):
    """
    Row check 
    """
    for row in range(len(board)):
        if board[row][0] == player and board[row][1] == player and board[row][2] == player:
            return True
    
    return False   
    
def colcheck(board,player):
    """
    Column check
    """
    for col in range(len(board)):
        if board[0][col] == player and board[1][col] == player and board[2][col] == player:
            return True
            
    return False
    
def crosscheck(board,player):
    """
    123 row-col check
    """
    count = 0
    
    for row in range(len(board)):
        for col in range(len(board[row])):
            if row == col and board[row][col] == player:
                count += 1
    if count == 3:
        return True
    else:
        return False
        
def crosscheckreverse(board,player):
    """
    321 col-row check 
    """
    count = 0
    
    for row in range(len(board)):
        for col in range(len(board[row])):
            if (len(board) - row - 1) == col and board[row][col] == player:
                count += 1
    if count == 3:
        return True
    else:
        return False


def winner(board):
    """
    Returns the winner of the game, if there is one.
    """
    
    if rowcheck(board, X) or colcheck(board, X) or crosscheck(board, X) or crosscheckreverse(board, X):
        return True
    elif rowcheck(board, Y) or colcheck(board, Y) or crosscheck(board, Y) or crosscheckreverse(board, Y):
        return True
    else:
        return None

def terminal(board):
    """
    Returns True if game is over, False otherwise.
    """
    if winner(board) == X or O:
        return True
    
    for row in range(len(board)):
        for col in range(len(board[row])):
            if board[row][col] == EMPTY:
                return False
    return True


def utility(board):
    """
    Returns 1 if X has won the game, -1 if O has won, 0 otherwise.
    """
    if winner(board) == X:
        return 1
    elif winner(board) == Y:
        return -1
    else:
        return 0
            

def Max_Value(board):
    v = -math.inf
    if terminal(board):
        return utility(board)
    for action in actions(board):
        v = max(v,Min_Value(result(board,action)))

def Max_Value(board):
    v = math.inf
    if terminal(board):
        return utility(board)
    for action in actions(board):
        v = min(v,Max_Value(result(board,action)))

def minimax(board):
    """
    Returns the optimal action for the current player on the board.
    """
    if terminal(board):
        return None
        
    elif player(board) == X:
        movess = []
        
        for action in actions(board):
            movess.append([Min_Value(result(board,action)),action])
        return sorted(movess, key=lambda x: x[0], reverse=True)[0][1]
        
    elif player(board) == O:
        movess = []
        
        for action in actions(board):
            movess.append([Max_Value(result(board,action)),action])
        return sorted(movess, key=lambda x: x[0])[0][1]
        
        
        
        
